#!/bin/bash

VERSION="0.11"

# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.

# Using this driver
#
# To create a bounded-local volume of 4g with delayed cleanup of 500 seconds: -
#
#  volumes:
#    - name: logging
#      flexVolume:
#        driver: "zopa.com/bounded-local"
#        fsType: "ext4"
#        options:
#          size: 4096         # size of volume in Mb
#          cleanupDelay: 500  # delay in seconds before removal
#          logCollection: "true"     # mirror the volume for log collection

# Configuration Values

# DEBUG_LOG: the location to log DEBUGGING MESSAGES
DEBUG_LOG=/etc/kubernetes/bounded-local.log

# DEBUG: set to 'true' to enable DEBUG logging to the DEBUG_LOG
DEBUG="true"

# VOLUME_PATH: location of sparse file and meta-data
# must be accessible to kublet (mount if running kubelet in container)
VOLUME_PATH=/var/lib/kubelet/bounded-local

# DEFAULT_DELAY: 0 for immediate removal (performed by the driver)
# When non-zero volume clean up must be performed by another maintenance task,
# driver just umounts and updates metadata status.
DEFAULT_DELAY=0

# DEFAULT_SIZE: Size in MB for the sparse volume
DEFAULT_SIZE=2048

# DEFAULT_MIRROR: Whether to mirror (mount it read only elsewhere) for log
# collection
DEFAULT_MIRROR="false"

err() {
  echo -ne $* 1>&2
}

log() {
  echo -ne $* >&1
}

debug() {
  echo -e "$(date) $*" >>${DEBUG_LOG}
}

ismounted() {
	local MNTPATH=$1
  [[ "${DEBUG}" == "true" ]] && debug "ismounted called with MNTPATH=${MNTPATH}"

  [[ "${DEBUG}" == "true" ]] && debug "ismounted run findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1 | head -1"
	local MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1 | head -1`
  [[ "${DEBUG}" == "true" ]] && debug "ismounted result: ${MOUNT} "
	[[ "${MOUNT}" == "${MNTPATH}" ]]
	return $?
}

# given a mounted path, work out the bounded-local 'device'
mounted_volume() {
  local MNTPATH=$1
  [[ "${DEBUG}" == "true" ]] && debug "mounted_volume called with MNTPATH=${MNTPATH}"
  [[ "${DEBUG}" == "true" ]] && debug "mounted_volume running mount | awk '(\$3 == '${MNTPATH}') {print \$1}' | head -1"

  local RESULT=$(mount | awk '($3 == "'${MNTPATH}'") {print $1}' | head -1)
  [[ "${DEBUG}" == "true" ]] && debug "mounted_volume result= ${RESULT}"
  echo "${RESULT}"
}

domount() {
  local MNTPATH=$1
  # Mount device option is missing if attach returns not supported so json opts become argument 2.
  #local DEV=$2
  local DEV=""
  local OPS=$2

  # Read mount options for size and clean up delay
  [[ "${DEBUG}" == "true" ]] && debug "domount called with MNTPATH=${MNTPATH}, DEV=${DEV}, OPS=${OPS}"
  local SIZE=$(echo $OPS | jq -r '.size')
  local DELAY=$(echo $OPS | jq -r '.cleanupDelay')
  local MIRROR=$(echo $OPS | jq -r '.logCollectCopy')
  [[ "$SIZE" == "null" ]] && SIZE=${DEFAULT_SIZE}
  [[ "$DELAY" == "null" ]] && DELAY=${DEFAULT_DELAY}
  [[ "$MIRROR" == "null" ]] && MIRROR=${DEFAULT_MIRROR}
  [[ "${DEBUG}" == "true" ]] && debug "domount SIZE=${SIZE}, DELAY=${DELAY}, MIRROR=${MIRROR}"

  local VOLNAME="bounded-local-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
  [[ "${DEBUG}" == "true" ]] && debug "domount generated name VOLNAME=${VOLNAME}"
  [[ "${DEBUG}" == "true" ]] && debug "domount running ismounted ${MNTPATH}"
  # check for already mounted
  if ismounted ${MNTPATH}; then
    [[ "${DEBUG}" == "true" ]] && debug "domount is already mounted send success"
    log "{\"status\": \"Success\"}"
    exit 0
  fi

  # create the sparse-file and mount it within the volume space
  [[ "${DEBUG}" == "true" ]] && debug "domount making directories ${MNTPATH} and ${VOLUME_PATH}/${VOLNAME}/vmount"
  mkdir -p ${MNTPATH} &> /dev/null
  mkdir -p ${VOLUME_PATH}/${VOLNAME}/vmount &> /dev/null
  [[ "${DEBUG}" == "true" ]] && debug "domount running dd of=${VOLUME_PATH}/${VOLNAME}/sparse-volume bs=1024k seek=${SIZE} count=0 &> /dev/null"
  dd of=${VOLUME_PATH}/${VOLNAME}/sparse-volume bs=1024k seek=${SIZE} count=0 &> /dev/null
  [[ "${DEBUG}" == "true" ]] && debug "domount running mkfs.ext4 ${VOLUME_PATH}/${VOLNAME}/sparse-volume  &> /dev/null"
  mkfs.ext4 ${VOLUME_PATH}/${VOLNAME}/sparse-volume  &> /dev/null
	# mount the sparse-volume to the dedicated
  [[ "${DEBUG}" == "true" ]] && debug "domount running mount ${VOLUME_PATH}/${VOLNAME}/sparse-volume ${VOLUME_PATH}/${VOLNAME}/vmount &> /dev/null"
  local RESULT=$(mount ${VOLUME_PATH}/${VOLNAME}/sparse-volume ${VOLUME_PATH}/${VOLNAME}/vmount 2>&1)
  if [ $? -ne 0 ]; then
    [[ "${DEBUG}" == "true" ]] && debug "domount sparefile mount failed, writing 'failed' to ${VOLUME_PATH}/${VOLNAME}/status"
    [[ "${DEBUG}" == "true" ]] && debug "domount mount output:\n${RESULT}"
    local TIMENOW=$(date +%s)
    echo "failed ${TIMENOW}" >${VOLUME_PATH}/${VOLNAME}/status
    err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${DEV} at ${VOLUME_PATH}/${VOLNAME}/vmount"
    exit 1
  fi
	# allow all uids access
	chmod 0777 ${VOLUME_PATH}/${VOLNAME}/vmount
	# bind mount the volume into the pod
  [[ "${DEBUG}" == "true" ]] && debug "domount bind mounting ${VOLUME_PATH}/${VOLNAME}/vmount to ${MNTPATH}"
	local RESULT=$(mount -o rbind  ${VOLUME_PATH}/${VOLNAME}/vmount ${MNTPATH} 2>&1)
  if [ $? -ne 0 ]; then
    [[ "${DEBUG}" == "true" ]] && debug "domount bind mount failed! Writing 'failed' to ${VOLUME_PATH}/${VOLNAME}/status"
    [[ "${DEBUG}" == "true" ]] && debug "domount bind mount output:\n${RESULT}"
    local TIMENOW=$(date +%s)
    echo "failed ${TIMENOW}" >${VOLUME_PATH}/${VOLNAME}/status
    err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${DEV} into pod ${MNTPATH}"
    exit 1
  fi
  [[ "${DEBUG}" == "true" ]] && debug "domount bind mount succeeded, writing metadata files to ${VOLUME_PATH}/${VOLNAME}/"

  #write meta-data
  local TIMENOW=$(date +%s)
  echo "mounted ${TIMENOW}" >${VOLUME_PATH}/${VOLNAME}/status
  echo "${MNTPATH}" >${VOLUME_PATH}/${VOLNAME}/mountpath
  echo "${DELAY}" >${VOLUME_PATH}/${VOLNAME}/cleanup_delay
  echo "${MIRROR}" >${VOLUME_PATH}/${VOLNAME}/mirror

  log "{\"status\": \"Success\"}"
  exit 0
}

unmount() {
  local MNTPATH=$1

  [[ "${DEBUG}" == "true" ]] && debug "unmount called with MNTPATH=${MNTPATH}"
  if ! ismounted ${MNTPATH}; then
    [[ "${DEBUG}" == "true" ]] && debug "unmount failed with ${MNTPATH} not mounted"
    log "{\"status\": \"Failed\", \"message\": \"Volume ${MNTPATH} is not mounted!\"}"
    exit 0
  fi

  # do the unmount
  local VOL=$(mounted_volume ${MNTPATH})
  local VOLPATH=${VOL%%/sparse-volume}
  [[ "${DEBUG}" == "true" ]] && debug "unmount unmounting volume ${VOL} from ${VOLPATH}"
  [[ "${DEBUG}" == "true" ]] && debug "unmount running umount -l ${MNTPATH}"
  local RESULT=$(umount -l ${MNTPATH} 2>&1)
  if [ $? -ne 0 ]; then
    [[ "${DEBUG}" == "true" ]] && debug "unmount failed, result:\n${RESULT}"
    local TIMENOW=$(date +%s)
    echo "failed ${TIMENOW}" >${VOLPATH}/status
    err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume ${VOL} at ${MNTPATH}\"}"
    exit 1
  fi

  # Remove immediately if cleanup_delay is 0
  # or just mark as unmounted for later clean up.
  local CLEAN_DELAY=$(cat ${VOLPATH}/cleanup_delay)
  if [[ "$CLEAN_DELAY" == "0" ]]; then
    [[ "${DEBUG}" == "true" ]] && debug "unmount no clean up unmounting ${VOLPATH}/vmount and removing ${VOLPATH}"
    umount -l ${VOLPATH}/vmount &> /dev/null
    rm -rf ${VOLPATH}
  else
    [[ "${DEBUG}" == "true" ]] && debug "unmount defering clean up to the bounded-local-controller"
    local TIMENOW=$(date +%s)
    echo "unmounted ${TIMENOW}" >${VOLPATH}/status
  fi

  log "{\"status\": \"Success\"}"
  exit 0
}

init() {
  [[ ! -d "${VOLUME_PATH}" ]] && mkdir -p ${VOLUME_PATH}
  log "{\"status\": \"Success\"}"
  exit 0
}

op=$1

shift

case "$op" in
  init) 
    init $*
    ;;
  mount)
    domount $*
    ;;
  unmount)
    unmount $*
    ;;
  *)
    log "{ \"status\": \"Not supported\" }"
	  exit 0
esac

